//go:build e2e_test
// +build e2e_test

/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package e2e_test

import (
	"fmt"

	"github.com/nukleros/operator-builder-tools/pkg/resources"
	"github.com/stretchr/testify/require"

	appsv1 "k8s.io/api/apps/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

	appsv1alpha1 "github.com/acme/acme-cnp-mgr/apis/apps/v1alpha1"
	"github.com/acme/acme-cnp-mgr/apis/apps/v1alpha1/webstore"
	//+kubebuilder:scaffold:operator-builder:imports
)

//
// appsv1alpha1WebStore tests
//
func appsv1alpha1WebStoreChildrenFuncs(tester *E2ETest) error {
	tester.children = make([]metav1.Object, len(webstore.CreateFuncs))

	if len(tester.children) == 0 {
		return nil
	}

	workload, ok := tester.workload.(*appsv1alpha1.WebStore)
	if !ok {
		return fmt.Errorf("could not convert metav1.Object to appsv1alpha1.WebStore")
	}

	for i, f := range webstore.CreateFuncs {
		resource, err := f(workload)
		if err != nil {
			return fmt.Errorf("unable to create object in memory; %s", err)
		}

		tester.children[i] = resource
	}

	return nil
}

var appsv1alpha1WebStoreTest = &E2ETest{
	namespace:          "test-apps-v1alpha1-webstore",
	unstructured:       &unstructured.Unstructured{},
	workload:           &appsv1alpha1.WebStore{},
	sampleManifestFile: "../../config/samples/apps_v1alpha1_webstore.yaml",
	getChildrenFunc:    appsv1alpha1WebStoreChildrenFuncs,
}

func (s *E2EComponentTestSuite) Test_appsv1alpha1WebStore() {
	// setup
	s.suite.tests = append(s.suite.tests, appsv1alpha1WebStoreTest)
	appsv1alpha1WebStoreTest.suite = &s.suite
	require.NoErrorf(s.T(), setupTest(appsv1alpha1WebStoreTest), "failed to setup test")

	// create the custom resource
	require.NoErrorf(s.T(), createCustomResource(appsv1alpha1WebStoreTest), "failed to create custom resource")

	// double-check that the child resources are ready
	require.NoErrorf(s.T(), waitForChildResources(appsv1alpha1WebStoreTest), "failed to wait for custom resource child resources")

	// test the deletion of a child object
	require.NoErrorf(s.T(), testDeleteChildResource(appsv1alpha1WebStoreTest), "failed to reconcile deletion of a child resource")

	// test the update of a child object
	// TODO: these are hard-coded for now until we can determine which fields on the underlying child resource
	// to update

	// get the object from the list of children and set its namespace
	childToUpdate := getUpdatableChild(
		appsv1alpha1WebStoreTest,
		"webstore-deploy",
		"",
		"Deployment",
	)
	childToUpdate.SetNamespace(appsv1alpha1WebStoreTest.namespace)

	// get the current state of the object from the cluster
	childFromCluster, err := getResource(appsv1alpha1WebStoreTest, childToUpdate)
	require.NoErrorf(s.T(), err, "failed to get updatable child from cluster")
	deploymentToUpdate := &appsv1.Deployment{}
	resources.ToProper(deploymentToUpdate, childFromCluster)

	// make a change to the child object
	replicas := int32(3)
	deploymentToUpdate.Spec.Replicas = &replicas

	// run the test and ensure it passes
	require.NoErrorf(
		s.T(),
		testUpdateChildResource(appsv1alpha1WebStoreTest, deploymentToUpdate, childToUpdate),
		"failed to reconcile update of a child resource",
	)

	// test the update of a parent object
	// TODO: need immutable fields so that we can predict which managed fields we can modify to test reconciliation
	// see https://github.com/vmware-tanzu-labs/operator-builder/issues/67

	// get the current state of the object from the cluster
	parentFromCluster, err := getResource(appsv1alpha1WebStoreTest, appsv1alpha1WebStoreTest.workload)
	require.NoErrorf(s.T(), err, "failed to get parent from cluster")

	// make a change to the parent workload
	resources.ToProper(appsv1alpha1WebStoreTest.workload, parentFromCluster)
	appsv1alpha1WebStoreTest.workload.(*appsv1alpha1.WebStore).Spec.Webstore.Really.Long.Nested.Path.Replicas = int(replicas)

	// run the test and ensure it passes
	require.NoErrorf(
		s.T(),
		testUpdateParentResource(appsv1alpha1WebStoreTest, deploymentToUpdate),
		"failed to reconcile update of a parent resource",
	)
}

//+kubebuilder:scaffold:operator-builder:testworkloads
