//go:build e2e_test
// +build e2e_test

// Copyright 2021 VMware, Inc.
// SPDX-License-Identifier: MIT

package e2e_test

import (
	"fmt"

	"github.com/nukleros/operator-builder-tools/pkg/resources"
	"github.com/stretchr/testify/require"
	"sigs.k8s.io/controller-runtime/pkg/client"

	appsv1 "k8s.io/api/apps/v1"
	"k8s.io/apimachinery/pkg/apis/meta/v1/unstructured"

	appsv1alpha1 "github.com/acme/acme-cnp-mgr/apis/apps/v1alpha1"
	"github.com/acme/acme-cnp-mgr/apis/apps/v1alpha1/webstore"
	//+kubebuilder:scaffold:operator-builder:imports
)

//
// appsv1alpha1WebStore tests
//
func appsv1alpha1WebStoreChildrenFuncs(tester *E2ETest) error {
	// TODO: need to run r.GetResources(request) on the reconciler to get the mutated resources
	tester.children = make([]client.Object, len(webstore.CreateFuncs))

	if len(tester.children) == 0 {
		return nil
	}

	workload, ok := tester.workload.(*appsv1alpha1.WebStore)
	if !ok {
		return fmt.Errorf("could not convert metav1.Object to appsv1alpha1.WebStore")
	}

	for i, f := range webstore.CreateFuncs {
		resource, err := f(workload)
		if err != nil {
			return fmt.Errorf("unable to create object in memory; %s", err)
		}

		tester.children[i] = resource.(client.Object)
	}

	return nil
}

func appsv1alpha1WebStoreTest() *E2ETest {
	return &E2ETest{
		namespace:          "test-apps-v1alpha1-webstore",
		unstructured:       &unstructured.Unstructured{},
		workload:           &appsv1alpha1.WebStore{},
		sampleManifestFile: "../../config/samples/apps_v1alpha1_webstore.yaml",
		getChildrenFunc:    appsv1alpha1WebStoreChildrenFuncs,
	}
}

func (testSuite *E2EComponentTestSuite) Test_appsv1alpha1WebStore() {
	// setup
	tester := appsv1alpha1WebStoreTest()
	testSuite.suiteConfig.tests = append(testSuite.suiteConfig.tests, tester)
	tester.suiteConfig = &testSuite.suiteConfig
	require.NoErrorf(testSuite.T(), tester.setup(), "failed to setup test")

	// create the custom resource
	require.NoErrorf(testSuite.T(), testCreateCustomResource(tester), "failed to create custom resource")

	// test the deletion of a child object
	require.NoErrorf(testSuite.T(), testDeleteChildResource(tester), "failed to reconcile deletion of a child resource")

	// test the update of a child object
	// TODO: these are hard-coded for now until we can determine which fields on the underlying child resource
	// to update

	// get the object from the list of children and set its namespace
	childToUpdate := getUpdatableChild(
		tester,
		"webstore-deploy",
		"",
		"Deployment",
	)
	childToUpdate.SetNamespace(tester.namespace)

	// get the current state of the object from the cluster
	childFromCluster, err := getResource(tester, childToUpdate)
	require.NoErrorf(testSuite.T(), err, "failed to get updatable child from cluster")
	deploymentToUpdate := &appsv1.Deployment{}
	resources.ToProper(deploymentToUpdate, childFromCluster)

	// make a change to the child object
	replicas := int32(3)
	deploymentToUpdate.Spec.Replicas = &replicas

	// run the test and ensure it passes
	require.NoErrorf(
		testSuite.T(),
		testUpdateChildResource(tester, deploymentToUpdate, childToUpdate),
		"failed to reconcile update of a child resource",
	)

	// test the update of a parent object
	// TODO: need immutable fields so that we can predict which managed fields we can modify to test reconciliation
	// see https://github.com/vmware-tanzu-labs/operator-builder/issues/67

	// get the current state of the object from the cluster
	parentFromCluster, err := getResource(tester, tester.workload)
	require.NoErrorf(testSuite.T(), err, "failed to get parent from cluster")

	// make a change to the parent workload
	resources.ToProper(tester.workload, parentFromCluster)
	tester.workload.(*appsv1alpha1.WebStore).Spec.Webstore.Really.Long.Nested.Path.Replicas = int(replicas)

	// run the test and ensure it passes
	require.NoErrorf(
		testSuite.T(),
		testUpdateParentResource(tester, deploymentToUpdate),
		"failed to reconcile update of a parent resource",
	)
}

//+kubebuilder:scaffold:operator-builder:testworkloads
