package common

import (
	"path/filepath"

	"sigs.k8s.io/kubebuilder/v3/pkg/machinery"
)

var _ machinery.Template = &Components{}

// Components scaffolds the interfaces between workloads.
type Components struct {
	machinery.TemplateMixin
	machinery.BoilerplateMixin

	IsStandalone bool
}

func (f *Components) SetTemplateDefaults() error {
	f.Path = filepath.Join("apis", "common", "components.go")

	f.TemplateBody = commonTemplate

	return nil
}

const commonTemplate = `
// +build !ignore_autogenerated

{{ .Boilerplate }}
package common

import (
	"context"

	"github.com/go-logr/logr"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	{{- if not .IsStandalone }}
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"
	{{ end -}}
)

type Component interface {
	GetReadyStatus() bool
	GetStatusConditions() []Condition
	SetStatusConditions(Condition)
	{{- if not .IsStandalone }}
	GetDependencyStatus() bool
	GetDependencies() []Component
	GetComponentGVK() schema.GroupVersionKind
	SetDependencyStatus(bool)
	SetReadyStatus(bool)
	{{ end -}}
}

type ComponentReconciler interface {
	GetContext() context.Context
	GetComponent() Component
	GetLogger() logr.Logger
	GetResources(Component) ([]metav1.Object, error)
	SetRefAndCreateIfNotPresent(metav1.Object) error
	UpdateStatus() error
	{{- if not .IsStandalone }}
	Get(context.Context, types.NamespacedName, client.Object) error
	GetClient() client.Client
	GetScheme() *runtime.Scheme
	List(context.Context, client.ObjectList, ...client.ListOption) error
	CheckReady() (bool, error)
	Mutate(*metav1.Object) ([]metav1.Object, bool, error)
	Wait(*metav1.Object) (bool, error)
	{{ end -}}
}
`
